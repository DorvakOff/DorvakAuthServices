openapi: "3.0.3"
info:
  title: "DorvakAuthServices API"
  description: "DorvakAuthServices API"
  version: "1.0.1"
servers:
  - url: "https://auth.dorvak.com"
paths:
  /api/user/avatar:
    post:
      summary: "POST api/user/avatar"
      operationId: "setAvatar"
      parameters:
        - name: "avatar"
          in: "query"
          required: true
          schema:
            type: "string"
            format: "binary"
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
  /api/user/avatar/{uuid}/{avatar}:
    get:
      summary: "GET api/user/avatar/{uuid}/{avatar}"
      operationId: "getAvatar"
      parameters:
        - name: "uuid"
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
        - name: "avatar"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "size"
          in: "query"
          required: false
          schema:
            type: "string"
            default: "128"
      responses:
        "200":
          description: "OK"
          content:
            image/jpeg:
              schema:
                type: "array"
                items:
                  type: "string"
                  format: "byte"
            image/png:
              schema:
                type: "array"
                items:
                  type: "string"
                  format: "byte"
  /api/user/create-account:
    post:
      summary: "POST api/user/create-account"
      operationId: "createAccount"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /api/user/data:
    get:
      summary: "GET api/user/data"
      operationId: "getUserData"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDto"
  /api/user/login:
    post:
      summary: "POST api/user/login"
      operationId: "login"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /api/oauth2/authorize:
    get:
      summary: "GET api/oauth2/authorize"
      operationId: "authorize"
      parameters:
        - name: "client_id"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "redirect_uri"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "scope"
          in: "query"
          required: false
          schema:
            type: "string"
            default: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Oauth2ApplicationDto"
  /api/oauth2/token:
    post:
      summary: "POST api/oauth2/token"
      operationId: "token"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /api/verify/{code}:
    get:
      summary: "GET api/verify/{code}"
      operationId: "verify"
      parameters:
        - name: "code"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
components:
  schemas:
    LoginDto:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
        email:
          type: "string"
        language:
          type: "string"
    UserDto:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        username:
          type: "string"
        email:
          type: "string"
        avatar:
          type: "string"
        language:
          type: "string"
    Oauth2ApplicationDto:
      type: "object"
      properties:
        scopes:
          type: "array"
          items:
            type: "string"
        clientId:
          type: "string"
        redirectUri:
          type: "string"
        name:
          type: "string"
    TokenDto:
      type: "object"
      properties:
        scopes:
          type: "array"
          items:
            type: "string"
        clientId:
          type: "string"
        redirectUri:
          type: "string"
        password:
          type: "string"
        username:
          type: "string"